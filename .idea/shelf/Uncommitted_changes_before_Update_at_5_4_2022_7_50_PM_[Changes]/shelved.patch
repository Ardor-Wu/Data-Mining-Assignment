Index: boats.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport traj_dist.distance as tdist\r\nimport pickle\r\nimport pandas as pd\r\nimport os\r\n\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\n\r\ndata_dir = '../data/archive/train_dataset/train'\r\nXs = []\r\nys = []\r\n# for i in range(1, (18329 + 1) // 100):\r\nfor i in range(1, 110 + 1):\r\n    data = pd.read_csv(os.path.join(data_dir, str(i) + '.csv'))\r\n    lat = np.array(data.iloc[:, 1])\r\n    lon = np.array(data.iloc[:, 2])\r\n    X = np.vstack([lat, lon]).T\r\n    y = data.iloc[:, -1][0]\r\n    Xs.append(X)\r\n    ys.append(y)\r\n\r\nk = 3\r\n# Xs = np.array(Xs, dtype='object')\r\n# ys = np.array(ys)\r\nX_train = Xs[:10]\r\nX_test = Xs[100:102]\r\ny_train = ys[:10]\r\ny_test = ys[100:102]\r\n\r\ncdist = tdist.cdist(X_test, X_train, metric=\"dtw\")\r\nidx = np.argpartition(cdist, k)[:, :k]\r\ny_pred = []\r\n\r\nfor i in range(len(idx)):\r\n    temp = [ys[j] for j in idx[i]]\r\n    pred = max(set(temp), key=temp.count)\r\n    y_pred.append(pred)\r\nprint(y_pred)\r\ncorrect = np.sum([y_pred[i] == y_test[i] for i in range(len(y_test))])\r\nacc = correct / len(y_test)\r\nprint(acc)\r\n'''\r\nknn = KNeighborsClassifier(n_neighbors=10, metric=tdist.dtw)\r\nknn.fit(Xs[:100], ys[:100])\r\ny_pred = knn.predict(Xs[100:])\r\n'''\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/boats.py b/boats.py
--- a/boats.py	(revision 38d747b6c69da8af0b120fc239377259246104b4)
+++ b/boats.py	(date 1651663305454)
@@ -1,46 +1,103 @@
+import os
+import random
+
 import numpy as np
-import traj_dist.distance as tdist
-import pickle
 import pandas as pd
-import os
-
+import traj_dist.distance as tdist
 from sklearn.neighbors import KNeighborsClassifier
 
-data_dir = '../data/archive/train_dataset/train'
-Xs = []
-ys = []
-# for i in range(1, (18329 + 1) // 100):
-for i in range(1, 110 + 1):
-    data = pd.read_csv(os.path.join(data_dir, str(i) + '.csv'))
-    lat = np.array(data.iloc[:, 1])
-    lon = np.array(data.iloc[:, 2])
-    X = np.vstack([lat, lon]).T
-    y = data.iloc[:, -1][0]
-    Xs.append(X)
-    ys.append(y)
+train_size, val_size, test_size = 600, 200, 200
+
+
+def load_data(directory, size, sample_rate=1000):
+    indices = random.sample(range(1, 18329 + 1), size)
+    Xs, ys = [], []
+    for i in indices:
+        data = pd.read_csv(os.path.join(directory, str(i) + '.csv').replace('\\', '/'))
+        lat = np.array(data.iloc[:, 1])[::sample_rate]
+        lon = np.array(data.iloc[:, 2])[::sample_rate]
+        X = np.vstack([lon, lat]).T
+        y = data.iloc[:, -1][0]
+        Xs.append(X)
+        ys.append(y)
+    return Xs, ys
+
+
+data_dir = '../data/archive'
+train_dir = os.path.join(data_dir, 'train_dataset/train').replace('\\', '/')
+test_dir = os.path.join(data_dir, 'test_dataset/test_dataset').replace('\\', '/')
+
+metrics = ["frechet", "sspd", "discret_frechet", "hausdorff", "dtw", "lcss", "edr", "erp"]
+
 
-k = 3
-# Xs = np.array(Xs, dtype='object')
-# ys = np.array(ys)
-X_train = Xs[:10]
-X_test = Xs[100:102]
-y_train = ys[:10]
-y_test = ys[100:102]
+# for metric in metrics:
+def test_metric(metric, n=5, eps=(10 ** i for i in range(-4, 2)), g=(float(10 ** i) for i in range(-4, 2)),
+                type_d='spherical'):
+    accs = []
+    eps = list(eps)
+    g = list(g)
+    k = int(np.floor(np.sqrt(train_size + val_size)))
+    for i in range(n):
+        X, y = load_data(train_dir, train_size + val_size + test_size, sample_rate=100)
+        assert metric in metrics
+        X_test, y_test = X[train_size + val_size:], y[train_size + val_size:]
+        if metric in metrics[:5]:
+            X_train = X[:train_size + val_size]
+            y_train = y[:train_size + val_size]
+        else:
+            X_train = X[:train_size]
+            y_train = y[:train_size]
+            X_val = X[train_size:train_size + val_size]
+            y_val = y[train_size:train_size + val_size]
+        if metric in metrics[:5]:
+            knn = KNeighborsClassifier(n_neighbors=k, metric='precomputed', n_jobs=-1)
+            train_dist = tdist.cdist(X_train, X_train, metric=metric, type_d=type_d)
+            knn.fit(train_dist, y_train)
+            test_dist = tdist.cdist(X_test, X_train, metric=metric, type_d=type_d)
+            y_pred = knn.predict(test_dist)
+            accs.append(np.mean(y_pred == y_test))
+        else:
+            val_accs = []
+            if metric == "edr" or metric == "lcss":
+                for epsilon in eps:
+                    knn = KNeighborsClassifier(n_neighbors=k, metric='precomputed', n_jobs=-1)
+                    train_dist = tdist.cdist(X_train, X_train, metric=metric, eps=epsilon, type_d=type_d)
+                    knn.fit(train_dist, y_train)
+                    val_dist = tdist.cdist(X_val, X_train, metric=metric, eps=epsilon, type_d=type_d)
+                    y_pred = knn.predict(val_dist)
+                    val_accs.append(np.mean(y_pred == y_val))
+                best_epsilon = list(eps)[np.argmax(val_accs)]
+                print(val_accs)
+                test_dist = tdist.cdist(X_test, X_train + X_val, metric=metric, eps=best_epsilon, type_d=type_d)
+                train_dist = tdist.cdist(X_train + X_val, X_train + X_val, metric=metric, eps=best_epsilon,
+                                         type_d=type_d)
+                knn = KNeighborsClassifier(n_neighbors=k, metric='precomputed', n_jobs=-1)
+                knn.fit(train_dist, y_train + y_val)
+                y_pred = knn.predict(test_dist)
+                accs.append(np.mean(y_pred == y_test))
+            else:  # metric="erp"
+                for g_value in g:
+                    g_value = np.array([g_value, g_value])
+                    knn = KNeighborsClassifier(n_neighbors=k, metric='precomputed', n_jobs=-1)
+                    train_dist = tdist.cdist(X_train, X_train, metric=metric, g=g_value, type_d=type_d)
+                    knn.fit(train_dist, y_train)
+                    val_dist = tdist.cdist(X_val, X_train, metric=metric, g=g_value, type_d=type_d)
+                    y_pred = knn.predict(val_dist)
+                    val_accs.append(np.mean(y_pred == y_val))
+                best_g = list(g)[np.argmax(val_accs)]
+                best_g = np.array([best_g, best_g])
+                print(val_accs)
+                test_dist = tdist.cdist(X_test, X_train + X_val, metric=metric, g=best_g, type_d=type_d)
+                train_dist = tdist.cdist(X_train + X_val, X_train + X_val, metric=metric, g=best_g, type_d=type_d)
+                knn = KNeighborsClassifier(n_neighbors=k, metric='precomputed', n_jobs=-1)
+                knn.fit(train_dist, y_train + y_val)
+                y_pred = knn.predict(test_dist)
+                accs.append(np.mean(y_pred == y_test))
 
-cdist = tdist.cdist(X_test, X_train, metric="dtw")
-idx = np.argpartition(cdist, k)[:, :k]
-y_pred = []
+    return accs
 
-for i in range(len(idx)):
-    temp = [ys[j] for j in idx[i]]
-    pred = max(set(temp), key=temp.count)
-    y_pred.append(pred)
-print(y_pred)
-correct = np.sum([y_pred[i] == y_test[i] for i in range(len(y_test))])
-acc = correct / len(y_test)
-print(acc)
-'''
-knn = KNeighborsClassifier(n_neighbors=10, metric=tdist.dtw)
-knn.fit(Xs[:100], ys[:100])
-y_pred = knn.predict(Xs[100:])
-'''
+
+print(metrics[-1], test_metric(metrics[-1]))
+
+for i in range(1, 7):
+    print(metrics[i], test_metric(metrics[i]))
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>install traj_dist as said on https://github.com/bguillouet/traj-dist
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 38d747b6c69da8af0b120fc239377259246104b4)
+++ b/README.md	(date 1651565706020)
@@ -1,1 +1,2 @@
-install traj_dist as said on https://github.com/bguillouet/traj-dist
\ No newline at end of file
+install traj_dist as said on https://github.com/bguillouet/traj-dist
+k=sqrt(N)
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9b6e8a11-3f1f-4d57-8286-e5b08d2a8405\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2816TYRrWtVOfatKE1Yg7DHJuHP\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"true\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9b6e8a11-3f1f-4d57-8286-e5b08d2a8405\" name=\"Changes\" comment=\"\" />\r\n      <created>1650371754315</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1650371754315</updated>\r\n      <workItem from=\"1650371755976\" duration=\"58000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 38d747b6c69da8af0b120fc239377259246104b4)
+++ b/.idea/workspace.xml	(date 1651664997177)
@@ -2,16 +2,37 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="9b6e8a11-3f1f-4d57-8286-e5b08d2a8405" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/boats.py" beforeDir="false" afterPath="$PROJECT_DIR$/boats.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FlaskConsoleOptions" custom-start-script="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))">
+    <envs>
+      <env key="FLASK_APP" value="app" />
+    </envs>
+    <option name="myCustomStartScript" value="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))" />
+    <option name="myEnvs">
+      <map>
+        <entry key="FLASK_APP" value="app" />
+      </map>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
+  </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
@@ -20,10 +41,55 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">
-    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-    <property name="WebServerToolWindowFactoryState" value="true" />
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "WebServerToolWindowFactoryState": "true"
+  }
+}]]></component>
+  <component name="RunManager" selected="Python.boats">
+    <configuration name="boats" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="Data-Mining-Assignment" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/boats.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration name="Python tests for boats.test_metric" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="Data-Mining-Assignment" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;boats.test_metric&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.boats" />
+        <item itemvalue="Python tests.Python tests for boats.test_metric" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
@@ -34,6 +100,24 @@
       <option name="presentableId" value="Default" />
       <updated>1650371754315</updated>
       <workItem from="1650371755976" duration="58000" />
+      <workItem from="1650422519048" duration="660000" />
+      <workItem from="1650444809967" duration="526000" />
+      <workItem from="1650445480124" duration="1147000" />
+      <workItem from="1650632451250" duration="2229000" />
+      <workItem from="1650635811051" duration="120000" />
+      <workItem from="1650976888011" duration="1804000" />
+      <workItem from="1651290007095" duration="623000" />
+      <workItem from="1651325793825" duration="649000" />
+      <workItem from="1651373316768" duration="1959000" />
+      <workItem from="1651460559969" duration="857000" />
+      <workItem from="1651542126852" duration="1572000" />
+      <workItem from="1651545065642" duration="135000" />
+      <workItem from="1651545222566" duration="145000" />
+      <workItem from="1651545380531" duration="4258000" />
+      <workItem from="1651560441562" duration="3014000" />
+      <workItem from="1651564749104" duration="3972000" />
+      <workItem from="1651661025723" duration="1078000" />
+      <workItem from="1651662211810" duration="2759000" />
     </task>
     <servers />
   </component>
@@ -51,4 +135,8 @@
       </map>
     </option>
   </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/Data_Mining_Assignment$boats.coverage" NAME="boats Coverage Results" MODIFIED="1651664538881" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Data_Mining_Assignment$.coverage" NAME=" Coverage Results" MODIFIED="1651663305462" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+  </component>
 </project>
\ No newline at end of file
